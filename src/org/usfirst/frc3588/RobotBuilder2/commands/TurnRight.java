// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3588.RobotBuilder2.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.RobotBuilder2.Robot;
import org.usfirst.frc3588.RobotBuilder2.RobotMap;
/**
 *
 */
public class TurnRight extends Command
{
    private double startHeading = 0.0;
    private double endHeading = 0.0;
    public TurnRight()
    {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pIDDrive);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize()
    {
        startHeading = RobotMap.pIDDriveGyro1.getAngle();
        endHeading = startHeading + 5;
        System.out.println(
                "Start Heading = " + startHeading + " and End Heading = " + endHeading);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute()
    {
        RobotMap.pIDDriveDriveTrain.mecanumDrive_Cartesian(0.1, -0.1, -1.0, 0.0);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished()
    {
        double currentHeading = RobotMap.pIDDriveGyro1.getAngle();
        double diff = endHeading - currentHeading;
        System.out.println(
                "Current Heading = " + currentHeading + " and difference = " + diff);
        if (diff < 2.0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    // Called once after isFinished returns true
    protected void end()
    {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted()
    {
    }
}
