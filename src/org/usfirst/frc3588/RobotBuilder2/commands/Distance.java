// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3588.RobotBuilder2.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.IllegalUseOfCommandException;
import org.usfirst.frc3588.RobotBuilder2.Robot;
import org.usfirst.frc3588.RobotBuilder2.RobotMap;
import org.usfirst.frc3588.RobotBuilder2.sensor.MaxbotixUltrasonic;
/**
 *
 */
public class Distance extends Command
{
    private MaxbotixUltrasonic fUltrasonicSensor = null;
    private long startTime = 0;
    public Distance()
    {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize()
    {
        startTime = System.currentTimeMillis();
        fUltrasonicSensor = new MaxbotixUltrasonic(4);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute()
    {
        long delta = System.currentTimeMillis() - startTime;
        System.out.println(
                "Average voltage = " + fUltrasonicSensor.getAverageVoltage() + " Voltage = " + fUltrasonicSensor.
                getVoltage() + " Distance in In = " + fUltrasonicSensor.
                getRangeInInches() + " Distance in Cm = " + fUltrasonicSensor.
                getRangeInCm() + " Delta time = " + delta);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished()
    {
        return false;
    }
    // Called once after isFinished returns true
    protected void end()
    {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted()
    {
    }
}
